package utils

import "strconv"

templ SkeletonTempl() {
	<!DOCTYPE html>
	<html lang="es">
		<head>
			<meta charset="utf-8"/>
			<title>Music-to-go</title>
			<link href="/public/css/output.css" rel="stylesheet"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet"/>
			<script src="/public/js/htmx.min.js" defer></script>
			<script src="/public/js/_hyperscript.min.js" defer></script>
			<script src="/public/js/howler.min.js" defer></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<script src="https://unpkg.com/htmx-ext-response-targets@2.0.0/response-targets.js" defer></script>
		</head>
		<body>
			<main class="pb-16">
				{ children... }
			</main>
		</body>
	</html>
}

templ MusicPlayer() {
	<div
		id="music-player"
		class="fixed bottom-0 left-0 w-screen border-t border-sky-500 grid grid-cols-[3rem_auto_3rem_3rem] gap-2 p-1 bg-white"
		x-data="player"
	>
		<div class="h-12 bg-sky-200 rounded">
			<img class="rounded" id="music-player-img" :src="queue[idx]? `/covers/${queue[idx]?.albumId}` : ''"/>
		</div>
		<div class="w-full overflow-hidden">
			<p
				id="music-player-title"
				class="overflow-hidden overflow-ellipsis whitespace-nowrap w-full"
				x-text="queue[idx]?.title ?? '-'"
			>
				-
			</p>
			<p
				id="music-player-artist"
				class="text-sm opacity-75 overflow-hidden overflow-ellipsis whitespace-nowrap w-full"
				x-text="queue[idx]?.artist ?? '-'"
			>
				-
			</p>
		</div>
		<div
			class="flex items-center justify-center cursor-pointer relative"
			@click="togglePlayPause"
		>
			@circleNotchIcon(48)
			@playIcon(26)
			@pauseIcon(26)
		</div>
		<button
			id="next-button"
			class="flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
			@click="next"
			:disabled="idx + 1 >= queue.length? true: false"
		>
			@skipForwardIcon(24)
		</button>
		<script>
		document.addEventListener('alpine:init', () => {
			Alpine.data("player", () => ({
				init() {
					window.replaceQueueAndPlayAt = (...params) => this.replaceQueueAndPlayAt(...params);
				},
				queue: [],
				idx: 0,
				currentSound: null,
				nextSound: null,
				volume: 0.1,
				playing: false,
				loading: false,

				replaceQueueAndPlayAt(queue, idx) {
					this.queue = queue;
					this.idx = idx;
					this.play();
				},
				// Plays the song at the current position
				async play() {
					const songId = this.queue[this.idx].songId;

					if (this.currentSound !== null) {
						this.currentSound.fade(this.volume, 0.0, 250);
						await wait(250);
						this.currentSound.unload();
					}

					const sound = new Howl({
						src: `https://navidrome.araozu.dev/rest/stream.view?id=${songId}&v=1.13.0&c=music-to-go&u=fernando&s=49805d&t=4148cd1c83ae1bd01334facf4e70a947`,
						html5: true,
						volume: this.volume,
					})
					this.loading = true;
					sound.play();
					let preloadInterval;
					sound.once("load", () => {
						const length = sound.duration();
						const targetLength = length - 5;
						preloadInterval = setInterval(() => {
							const pos = sound.seek();
							if (pos > targetLength) {
								this.preload();
								clearInterval(preloadInterval);
							}
						}, 1000);
						this.loading = false;
						this.playing = true;
					});
					sound.once("end", () => {
						this.playing = false;
						this.next();
					});
					this.currentSound = sound;
				},
				async playNext() {
					this.currentSound?.unload();
					this.nextSound.play();
					this.playing = true;
					this.currentSound = this.nextSound;
					this.nextSound = null;
				},
				togglePlayPause() {
					if (this.playing === true) {
						this.playing = false;
						this.currentSound?.pause();
					} else {
						this.playing = true;
						this.currentSound?.play();
					}
				},
				next() {
					if (this.idx + 1 < this.queue.length) {
						this.idx += 1;
						this.playNext();
					}
				},
				preload() {
					console.log("preloading");
					if (!(this.idx + 1 < this.queue.length)) {
						return
					}

					const nextSongId = this.queue[this.idx + 1].songId;
					const nextSound = new Howl({
						src: `https://navidrome.araozu.dev/rest/stream.view?id=${nextSongId}&v=1.13.0&c=music-to-go&u=fernando&s=49805d&t=4148cd1c83ae1bd01334facf4e70a947`,
						html5: true,
						volume: 0,
						preload: true,
					});
					// Attempt to play immediately the song, immediately pause it, rewind it and set volume back up
					nextSound.play();

					let preloadInterval;
					nextSound.once("load", () => {
						nextSound.pause();
						nextSound.seek(0);
						nextSound.volume(this.volume);

						const length = nextSound.duration();
						const targetLength = length - 5;
						preloadInterval = setInterval(() => {
							const pos = nextSound.seek();
							if (pos > targetLength) {
								this.preload();
								clearInterval(preloadInterval);
							}
						}, 1000);
						this.loading = false;
						this.playing = true;
					});
					nextSound.once("end", () => {
						this.playing = false;
						this.next();
					});
					this.nextSound = nextSound;
				}
			}));
		})

		function wait(ms) {
			return new Promise(r => setTimeout(r, ms));
		}
		</script>
	</div>
}

templ playIcon(size int) {
	<svg
		id="play-icon"
		xmlns="http://www.w3.org/2000/svg"
		width={ strconv.Itoa(size) }
		height={ strconv.Itoa(size) }
		fill="#000000"
		viewBox="0 0 256 256"
		style="--darkreader-inline-fill: #000000;"
		data-darkreader-inline-fill=""
		:style="{display: playing? 'none': 'inline-block'}"
	>
		<path d="M240,128a15.74,15.74,0,0,1-7.6,13.51L88.32,229.65a16,16,0,0,1-16.2.3A15.86,15.86,0,0,1,64,216.13V39.87a15.86,15.86,0,0,1,8.12-13.82,16,16,0,0,1,16.2.3L232.4,114.49A15.74,15.74,0,0,1,240,128Z"></path>
	</svg>
}

templ pauseIcon(size int) {
	<svg
		id="pause-icon"
		xmlns="http://www.w3.org/2000/svg"
		fill="#000000"
		viewBox="0 0 256 256"
		style="--darkreader-inline-fill: #000000;"
		data-darkreader-inline-fill=""
		class="hidden"
		width={ strconv.Itoa(size) }
		height={ strconv.Itoa(size) }
		:style="{display: playing? 'inline-block': 'none'}"
	>
		<path d="M216,48V208a16,16,0,0,1-16,16H160a16,16,0,0,1-16-16V48a16,16,0,0,1,16-16h40A16,16,0,0,1,216,48ZM96,32H56A16,16,0,0,0,40,48V208a16,16,0,0,0,16,16H96a16,16,0,0,0,16-16V48A16,16,0,0,0,96,32Z"></path>
	</svg>
}

templ skipForwardIcon(size int) {
	<svg xmlns="http://www.w3.org/2000/svg" width={ strconv.Itoa(size) } height={ strconv.Itoa(size) } fill="#000000" viewBox="0 0 256 256" style="--darkreader-inline-fill: #000000;" data-darkreader-inline-fill="">
		<path d="M208,40V216a8,8,0,0,1-16,0V146.77L72.43,221.55A15.95,15.95,0,0,1,48,208.12V47.88A15.95,15.95,0,0,1,72.43,34.45L192,109.23V40a8,8,0,0,1,16,0Z"></path>
	</svg>
}

templ circleNotchIcon(size int) {
	<svg
		id="spinner"
		:style="{display: loading? 'inline-block': 'none'}"
		xmlns="http://www.w3.org/2000/svg"
		fill="#000000"
		viewBox="0 0 256 256"
		style="--darkreader-inline-fill: #000000;"
		data-darkreader-inline-fill=""
		width={ strconv.Itoa(size) }
		height={ strconv.Itoa(size) }
		class="absolute animate-spin"
	>
		<path d="M232,128a104,104,0,0,1-208,0c0-41,23.81-78.36,60.66-95.27a8,8,0,0,1,6.68,14.54C60.15,61.59,40,93.27,40,128a88,88,0,0,0,176,0c0-34.73-20.15-66.41-51.34-80.73a8,8,0,0,1,6.68-14.54C208.19,49.64,232,87,232,128Z"></path>
	</svg>
}
